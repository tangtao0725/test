# Copyright IBM Corp. All Rights Reserved.
#
# SPDX-License-Identifier: Apache-2.0
#

version: '3.3'

services:
  ca0:
    image: hyperledger/fabric-ca:x86_64-1.0.5
    networks:
      - fabric-network
    deploy:
      placement:
        constraints:
          - node.hostname == 10-23-134-182
      update_config:
        parallelism: 1
        delay: 2s
      restart_policy:
        condition: on-failure
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca-org1
    ports:
      - target: 7054
        published: 7054
        protocol: tcp
        mode: host
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ca0_Data:/etc/hyperledger/fabric-ca-server

  ca1:
    image: hyperledger/fabric-ca:x86_64-1.0.5
    networks:
      - fabric-network
    deploy:
      placement:
        constraints:
          - node.hostname == 10-23-90-250
      update_config:
        parallelism: 1
        delay: 2s
      restart_policy:
        condition: on-failure
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca-org2
    ports:
      - target: 7054
        published: 8054
        protocol: tcp
        mode: host
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ca1_Data:/etc/hyperledger/fabric-ca-server

  zookeeper0:
    image: hyperledger/fabric-zookeeper:x86_64-1.0.5
    networks:
      - fabric-network
    deploy:
      placement:
        constraints:
          - node.hostname == 10-23-84-36
      update_config:
        parallelism: 1
        delay: 2s
      restart_policy:
        condition: on-failure
    ports:
      - target: 2181
        published: 2181
        protocol: tcp
        mode: fabric-network
    environment:
      ZOO_MY_ID: "0"
      ZOO_DATA_DIR: /var/data/zookeeper
      ZOO_SERVERS:  "server.0=0.0.0.0:2888:3888 server.1=zookeeper1:2888:3888 server.2=zookeeper2:2888:3888"
    volumes:
      - zk0_Data:/var/data/zookeeper

  zookeeper1:
    image: hyperledger/fabric-zookeeper:x86_64-1.0.5
    networks:
      - fabric-network
    deploy:
      placement:
        constraints:
          - node.hostname == 10-23-134-182
      update_config:
        parallelism: 1
        delay: 2s
      restart_policy:
        condition: on-failure
    ports:
      - target: 2181
        published: 2182
        protocol: tcp
        mode: fabric-network
    environment:
      ZOO_MY_ID: "1"
      ZOO_DATA_DIR: /var/data/zookeeper
      ZOO_SERVERS:  "server.0=zookeeper0:2888:3888 server.1=0.0.0.0:2888:3888 server.2=zookeeper2:2888:3888"
    volumes:
      - zk1_Data:/var/data/zookeeper

  zookeeper2:
    image: hyperledger/fabric-zookeeper:x86_64-1.0.5
    networks:
      - fabric-network
    deploy:
      placement:
        constraints:
          - node.hostname == 10-23-90-250
      update_config:
        parallelism: 1
        delay: 2s
      restart_policy:
        condition: on-failure
    ports:
      - target: 2181
        published: 2183
        protocol: tcp
        mode: fabric-network
    environment:
      ZOO_MY_ID: "2"
      ZOO_DATA_DIR: /var/data/zookeeper
      ZOO_SERVERS:  "server.0=zookeeper0:2888:3888 server.1=zookeeper1:2888:3888 server.2=0.0.0.0:2888:3888"
    volumes:
      - zk2_Data:/var/data/zookeeper

  kafka0:
    image: hyperledger/fabric-kafka:x86_64-1.0.5
    networks:
      - fabric-network
    deploy:
      placement:
        constraints:
          - node.hostname == 10-23-84-36
      update_config:
        parallelism: 1
        delay: 2s
      restart_policy:
        condition: on-failure
    environment:
      KAFKA_MESSAGE_MAX_BYTES: 103809024
      KAFKA_REPLICA_FETCH_MAX_BYTES: 103809024
      KAFKA_BROKER_ID: 0
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: "false"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper0:2181,zookeeper1:2181,zookeeper2:2181/k0"
      KAFKA_LOG_DIRS: /var/log/kafka
    volumes:
      - kafka0_Data:/opt/kafka
      - kafka0_Log_Data:/var/log/kafka
    ports:
      - target: 9092
        published: 9092
        protocol: tcp
        mode: host
    depends_on:
      - zookeeper0
      - zookeeper1
      - zookeeper2

  kafka1:
    image: hyperledger/fabric-kafka:x86_64-1.0.5
    networks:
      - fabric-network
    deploy:
      placement:
        constraints:
          - node.hostname == 10-23-134-182
      update_config:
        parallelism: 1
        delay: 2s
      restart_policy:
        condition: on-failure
    environment:
      KAFKA_MESSAGE_MAX_BYTES: 103809024
      KAFKA_REPLICA_FETCH_MAX_BYTES: 103809024
      KAFKA_BROKER_ID: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: "false"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper0:2181,zookeeper1:2181,zookeeper2:2181/k0"
      KAFKA_LOG_DIRS: /var/log/kafka
    volumes:
      - kafka1_Data:/opt/kafka
      - kafka1_Log_Data:/var/log/kafka
    ports:
      - target: 9092
        published: 9093
        protocol: tcp
        mode: host
    depends_on:
      - zookeeper0
      - zookeeper1
      - zookeeper2

  kafka2:
    image: hyperledger/fabric-kafka:x86_64-1.0.5
    networks:
      - fabric-network
    deploy:
      placement:
        constraints:
          - node.hostname == 10-23-134-182
      update_config:
        parallelism: 1
        delay: 2s
      restart_policy:
        condition: on-failure
    environment:
      KAFKA_MESSAGE_MAX_BYTES: 103809024
      KAFKA_REPLICA_FETCH_MAX_BYTES: 103809024
      KAFKA_BROKER_ID: 2
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: "false"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper0:2181,zookeeper1:2181,zookeeper2:2181/k0"
      KAFKA_LOG_DIRS: /var/log/kafka
    volumes:
      - kafka2_Data:/opt/kafka
      - kafka2_Log_Data:/var/log/kafka
    ports:
      - target: 9092
        published: 9094
        protocol: tcp
        mode: host
    depends_on:
      - zookeeper0
      - zookeeper1
      - zookeeper2

  kafka3:
    image: hyperledger/fabric-kafka:x86_64-1.0.5
    networks:
      - fabric-network
    deploy:
      placement:
        constraints:
          - node.hostname == 10-23-90-250
      update_config:
        parallelism: 1
        delay: 2s
      restart_policy:
        condition: on-failure
    environment:
      KAFKA_MESSAGE_MAX_BYTES: 103809024
      KAFKA_REPLICA_FETCH_MAX_BYTES: 103809024
      KAFKA_BROKER_ID: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 3
      KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE: "false"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper0:2181,zookeeper1:2181,zookeeper2:2181/k0"
      #KAFKA_ZOOKEEPER_CONNECT: zookeeper0:2181
      KAFKA_LOG_DIRS: /var/log/kafka
    volumes:
      - kafka3_Data:/opt/kafka
      - kafka3_Log_Data:/var/log/kafka
    ports:
      - target: 9092
        published: 9095
        protocol: tcp
        mode: host
    depends_on:
      - zookeeper0
      - zookeeper1
      - zookeeper2

  orderer0:
    image: hyperledger/fabric-orderer:x86_64-1.0.5
    networks:
      - fabric-network
    deploy:
      placement:
        constraints:
          - node.hostname == 10-23-84-36
      update_config:
        parallelism: 1
        delay: 2s
      restart_policy:
        condition: on-failure
    environment:
      - ORDERER_KAFKA_VERBOSE=true
      - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
      - ORDERER_KAFKA_RETRY_SHORTTOTAL=10m
      - ORDERER_GENERAL_LOGLEVEL=debug
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_FILELEDGER_LOCATION=/var/hyperledger/fabric/orderer
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    volumes:
      - $MANAGER_CERT_PATH/channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
      - $MANAGER_CERT_PATH/crypto-config/ordererOrganizations/example.com/orderers/orderer0/msp:/var/hyperledger/orderer/msp
      - orderer0_Data:/var/hyperledger/fabric/orderer
    ports:
      - target: 7050
        published: 7055
        protocol: tcp
        mode: host
    depends_on:
      - kafka0
      - kafka1
      - kafka2
      - kafka3

  orderer1:
    image: hyperledger/fabric-orderer:x86_64-1.0.5
    networks:
      - fabric-network
    deploy:
      placement:
        constraints:
          - node.hostname == 10-23-134-182
      update_config:
        parallelism: 1
        delay: 2s
      restart_policy:
        condition: on-failure
    environment:
      - ORDERER_KAFKA_VERBOSE=true
      - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
      - ORDERER_KAFKA_RETRY_SHORTTOTAL=10m
      - ORDERER_GENERAL_LOGLEVEL=debug
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_FILELEDGER_LOCATION=/var/hyperledger/fabric/orderer
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    volumes:
      - $NODE0_CERT_PATH/channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
      - $NODE0_CERT_PATH/crypto-config/ordererOrganizations/example.com/orderers/orderer1/msp:/var/hyperledger/orderer/msp
      - orderer1_Data:/var/hyperledger/fabric/orderer
    ports:
      - target: 7050
        published: 7056
        protocol: tcp
        mode: host
    depends_on:
      - kafka0
      - kafka1
      - kafka2
      - kafka3

  orderer2:
    image: hyperledger/fabric-orderer:x86_64-1.0.5
    networks:
      - fabric-network
    deploy:
      placement:
        constraints:
          - node.hostname == 10-23-90-250
      update_config:
        parallelism: 1
        delay: 2s
      restart_policy:
        condition: on-failure
    environment:
      - ORDERER_KAFKA_VERBOSE=true
      - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
      - ORDERER_KAFKA_RETRY_SHORTTOTAL=10m
      - ORDERER_GENERAL_LOGLEVEL=debug
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_FILELEDGER_LOCATION=/var/hyperledger/fabric/orderer
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    volumes:
      - $NODE1_CERT_PATH/channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block
      - $NODE1_CERT_PATH/crypto-config/ordererOrganizations/example.com/orderers/orderer2/msp:/var/hyperledger/orderer/msp
      - orderer2_Data:/var/hyperledger/fabric/orderer
    ports:
      - target: 7050
        published: 7057
        protocol: tcp
        mode: host
    depends_on:
      - kafka0
      - kafka1
      - kafka2
      - kafka3

  couchdb0:
    image: hyperledger/fabric-couchdb:x86_64-1.0.5
    networks:
      - fabric-network
    deploy:
      placement:
        constraints:
          - node.hostname == 10-23-134-182
      update_config:
        parallelism: 1
        delay: 2s
      restart_policy:
        condition: on-failure
    environment:
      - COUCHDB_USER=admin
      - COUCHDB_PASSWORD=adminpw
    volumes:
     - couchdb0:/opt/couchdb/data
    # Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,
    # for example map it to utilize Fauxton User Interface in dev environments.
    ports:
      - target: 5984
        published: 5984
        protocol: tcp
        mode: fabric-network

  peer0Org1:
    image: hyperledger/fabric-peer:x86_64-1.0.5
    networks:
      - fabric-network
    deploy:
      placement:
        constraints:
          - node.hostname == 10-23-134-182
      update_config:
        parallelism: 1
        delay: 2s
      restart_policy:
        condition: on-failure
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      #- CORE_PEER_ENDORSER_ENABLED=true
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=host
      #- CORE_LOGGING_LEVEL=ERROR
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb0:5984
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=admin
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=adminpw
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      #- CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_ID=peer0Org1
      - CORE_PEER_ADDRESS=120.132.21.203:7051
      - CORE_PEER_NETWORKID=product
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_EVENTS_ADDRESS=0.0.0.0:7053
      #- CORE_PEER_CHAINCODELISTENADDRESS=120.132.21.203:7052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=120.132.21.203:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
    volumes:
      - /var/run/:/host/var/run/
      - $NODE0_CERT_PATH/crypto-config/peerOrganizations/org1.example.com/peers/peer0Org1/msp:/etc/hyperledger/fabric/msp
      - peer0Org1:/var/hyperledger/production
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    ports:
      - target: 7051
        published: 7051
        protocol: tcp
        mode: host
      - target: 7052
        published: 7052
        protocol: tcp
        mode: host
      - target: 7053
        published: 7053
        protocol: tcp
        mode: host
    depends_on:
      - couchdb0

  couchdb1:
    image: hyperledger/fabric-couchdb:x86_64-1.0.5
    networks:
      - fabric-network
    deploy:
      placement:
        constraints:
          - node.hostname == 10-23-134-182
      update_config:
        parallelism: 1
        delay: 2s
      restart_policy:
        condition: on-failure
    environment:
      - COUCHDB_USER=admin
      - COUCHDB_PASSWORD=adminpw
    volumes:
     - couchdb1:/opt/couchdb/data
    # Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,
    # for example map it to utilize Fauxton User Interface in dev environments.
    ports:
      - target: 5984
        published: 6984
        protocol: tcp
        mode: fabric-network

  peer1Org1:
    image: hyperledger/fabric-peer:x86_64-1.0.5
    networks:
      - fabric-network
    deploy:
      placement:
        constraints:
          - node.hostname == 10-23-134-182
      update_config:
        parallelism: 1
        delay: 2s
      restart_policy:
        condition: on-failure
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      #- CORE_PEER_ENDORSER_ENABLED=true
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=host
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb1:5984
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=admin
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=adminpw
      #- CORE_LOGGING_LEVEL=ERROR
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      #- CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_ID=peer1Org1
      - CORE_PEER_ADDRESS=120.132.21.203:8051
      - CORE_PEER_NETWORKID=product
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_EVENTS_ADDRESS=0.0.0.0:7053
      #- CORE_PEER_CHAINCODELISTENADDRESS=120.132.21.203:8052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=120.132.21.203:8051
      - CORE_PEER_GOSSIP_BOOTSTRAP=120.132.21.203:7051
      - CORE_PEER_LOCALMSPID=Org1MSP
    volumes:
      - /var/run/:/host/var/run/
      - peer1Org1:/var/hyperledger/production
      - $NODE0_CERT_PATH/crypto-config/peerOrganizations/org1.example.com/peers/peer1Org1/msp:/etc/hyperledger/fabric/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    ports:
      - target: 7051
        published: 8051
        protocol: tcp
        mode: host
      - target: 7052
        published: 8052
        protocol: tcp
        mode: host
      - target: 7053
        published: 8053
        protocol: tcp
        mode: host
    depends_on:
      - couchdb1

  couchdb2:
    image: hyperledger/fabric-couchdb:x86_64-1.0.5
    networks:
      - fabric-network
    deploy:
      placement:
        constraints:
          - node.hostname == 10-23-90-250
      update_config:
        parallelism: 1
        delay: 2s
      restart_policy:
        condition: on-failure
    environment:
      - COUCHDB_USER=admin
      - COUCHDB_PASSWORD=adminpw
    volumes:
     - couchdb2:/opt/couchdb/data
    # Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,
    # for example map it to utilize Fauxton User Interface in dev environments.
    ports:
      - target: 5984
        published: 7984
        protocol: tcp
        mode: fabric-network

  peer0Org2:
    image: hyperledger/fabric-peer:x86_64-1.0.5
    networks:
      - fabric-network
    deploy:
      placement:
        constraints:
          - node.hostname == 10-23-90-250
      update_config:
        parallelism: 1
        delay: 2s
      restart_policy:
        condition: on-failure
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      #- CORE_PEER_ENDORSER_ENABLED=true
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=host
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb2:5984
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=admin
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=adminpw
      #- CORE_LOGGING_LEVEL=ERROR
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      #- CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_ID=peer0Org2
      - CORE_PEER_ADDRESS=120.132.21.215:7051
      - CORE_PEER_NETWORKID=product
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_EVENTS_ADDRESS=0.0.0.0:7053
      #- CORE_PEER_CHAINCODELISTENADDRESS=120.132.21.215:7052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=120.132.21.215:7051
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
      - /var/run/:/host/var/run/
      - peer0Org2:/var/hyperledger/production
      - $NODE1_CERT_PATH/crypto-config/peerOrganizations/org2.example.com/peers/peer0Org2/msp:/etc/hyperledger/fabric/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    ports:
      - target: 7051
        published: 7051
        protocol: tcp
        mode: host
      - target: 7052
        published: 7052
        protocol: tcp
        mode: host
      - target: 7053
        published: 7053
        protocol: tcp
        mode: host
    depends_on:
      - couchdb2

  couchdb3:
    image: hyperledger/fabric-couchdb:x86_64-1.0.5
    networks:
      - fabric-network
    deploy:
      placement:
        constraints:
          - node.hostname == 10-23-90-250
      update_config:
        parallelism: 1
        delay: 2s
      restart_policy:
        condition: on-failure
    environment:
      - COUCHDB_USER=admin
      - COUCHDB_PASSWORD=adminpw
    volumes:
     - couchdb3:/opt/couchdb/data
    # Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,
    # for example map it to utilize Fauxton User Interface in dev environments.
    ports:
      - target: 5984
        published: 8984
        protocol: tcp
        mode: fabric-network

  peer1Org2:
    image: hyperledger/fabric-peer:x86_64-1.0.5
    networks:
      - fabric-network
    deploy:
      placement:
        constraints:
          - node.hostname == 10-23-90-250
      update_config:
        parallelism: 1
        delay: 2s
      restart_policy:
        condition: on-failure
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      # the following setting starts chaincode containers on the same
      # bridge network as the peers
      # https://docs.docker.com/compose/networking/
      #- CORE_PEER_ENDORSER_ENABLED=true
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=host
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb3:5984
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=admin
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=adminpw
      #- CORE_LOGGING_LEVEL=ERROR
      - CORE_LOGGING_LEVEL=DEBUG
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      #- CORE_PEER_PROFILE_ENABLED=true
      - CORE_PEER_ID=peer1Org2
      - CORE_PEER_ADDRESS=120.132.21.215:8051
      - CORE_PEER_NETWORKID=product
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      - CORE_PEER_EVENTS_ADDRESS=0.0.0.0:7053
      #- CORE_PEER_CHAINCODELISTENADDRESS=120.132.21.215:8052
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=120.132.21.215:8051
      - CORE_PEER_GOSSIP_BOOTSTRAP=120.132.21.215:7051
      - CORE_PEER_LOCALMSPID=Org2MSP
    volumes:
      - /var/run/:/host/var/run/
      - peer1Org2:/var/hyperledger/production
      - $NODE1_CERT_PATH/crypto-config/peerOrganizations/org2.example.com/peers/peer1Org2/msp:/etc/hyperledger/fabric/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    ports:
      - target: 7051
        published: 8051
        protocol: tcp
        mode: host
      - target: 7052
        published: 8052
        protocol: tcp
        mode: host
      - target: 7053
        published: 8053
        protocol: tcp
        mode: host
    depends_on:
      - couchdb3

#named volumes data path: /var/lib/docker/volumes
volumes:
  zk0_Data:
  zk1_Data:
  zk2_Data:
  ca0_Data:
  ca1_Data:
  kafka0_Log_Data:
  kafka1_Log_Data:
  kafka2_Log_Data:
  kafka3_Log_Data:
  kafka0_Data:
  kafka1_Data:
  kafka2_Data:
  kafka3_Data:
  orderer0_Data:
  orderer1_Data:
  orderer2_Data:
  couchdb0:
  couchdb1:
  couchdb2:
  couchdb3 :
  peer0Org1:
  peer1Org1:
  peer0Org2:
  peer1Org2:

networks:
  fabric-network:
    external: true
    driver: overlay
    ipam:
      config:
        - subnet: "10.0.7.0/24"
